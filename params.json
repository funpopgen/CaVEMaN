{
  "name": "Caveman",
  "tagline": "Causal Variant Evidence MApping with Non-parametric resampling",
  "body": "# CaVEMaN Causal Variant Evidence MApping Using Non-parametric resampling\r\n\r\nGiven the results of an eQTL mapping analysis, together with the expression, genotype and phenotype files, this software will estimate credible sets of SNPs as well as the probability that the peak eQTL is causal. For more details, please see the paper (soon).\r\n\r\n## Contents\r\n\r\n1. [Downloading CaVEMaN](#downloading-caveman)\r\n2. [Input data formats](#input-data-formats)\r\n3. [Creating a single phenotype bed file from an eQTL list](#creating-a-single-phenotype-bed-file-from-an-eqtl-list)\r\n4. [Running CaVEMaN](#running-caveman)\r\n5. [Extracting peak SNPs and estimating causal probabilities](#extracting-peak-snps-and-estimating-causal-probabilities)\r\n6. [Producing credible sets of SNPs](#producing-credible-sets-of-snps)\r\n7. [Building from source](#building-from-source)\r\n\r\n## Downloading CaVEMaN\r\n\r\nCaVEMaN binaries can be downloaded from here:\r\n\r\nhttps://github.com/funpopgen/CaVEMaN/releases/tag/v1.0\r\n\r\nIf there are any issues, you can try [building from source](#building-from-source), or contact andrew.brown@unige.ch.\r\n\r\n## Input data formats\r\n\r\nCaVEMaN uses the same data formats as fastQTL (http://fastqtl.sourceforge.net/), which the exception that the bed file should be uncompressed. To convert the fastQTL bed file run the following line:\r\n\r\n    gunzip myphenotypefile.bed.gz\r\n\r\nThe bed file should only contain genes for which an eQTL has been discovered, unless a set of conditional eQTLs have been produced, in which case the next section explains how to produce a new bed file from this list. This requires a list of eQTL, which should be a tab-separated file with no header, and the following fields to uniquely determine the SNP-gene pairs:\r\n\r\n1. Gene\r\n2. Chromosome\r\n3. Base pair location\r\n4. Reference allele\r\n5. Alternate allele\r\n\r\nThe --correct option can also take a covariates file. This should be tab separated, the first row should contain subject IDs, and there should be one row for each covariate.\r\n\r\n## Creating a single phenotype bed file from an eQTL list\r\n\r\nCaVEMaN is based on the assumption that there is only one eQTL signal in the cis window. In cases where multiple eQTLs are known for a given gene, we can produce \"single signal\" phenotypes by regressing out all but one eQTL at a time (and optionally covariates as well). Given an expression bed file (expression.bed), a genotype file (genotype.vcf.gz) and a list of eQTL (eqtl.list), we produce the file with the following command:\r\n\r\n     CaVEMaN --correct eqtl.list --bed expression.bed --vcf genotype.vcf.gz \\\r\n         --out corrected.expression.bed\r\n\r\nIf a set of important covariates are known (covariates.txt) were included in the eQTL mapping, these can be considered as well:\r\n\r\n     CaVEMaN --correct eqtl.list --bed expression.bed --vcf genotype.vcf.gz \\\r\n         --out corrected.expression.bed --cov covariates.txt\r\n\r\n## Running CaVEMaN\r\n\r\nTo run CaVEMaN, all that is necessary is a bed file containing expression values (expression.bed) and a vcf file containing genotype values (genotype.vcf.gz, either the DS or GT field must be present).\r\n\r\nCaVEMaN has been designed so that the full analysis can be broken up into chunks, which can be submitted as cluster jobs separately. This requires two flags (if neither are present the whole analysis will be submitted), --genes specifies the number of genes to be analysed in each job, --job-number indexes the job. Therefore, if --genes 10 is specified, --job-number 1 will analyse genes 1-10 in the bed file, --job-number 2 will process genes 11-20 and so on.\r\n\r\nTo submit a job array, with a bed file of 9,995 genes, where each job analyses 50 genes, we would submit the following command to an LSF cluster:\r\n\r\n     bsub -o out -J\"CaVEMaN[1-200]\" \\\r\n         \"CaVEMaN --bed expression.bed --vcf genotype.vcf.gz --genes 50 \\\r\n         --job-number \\LSB_JOBINDEX --out results\\LSB_JOBINDEX\"\r\n\r\nIn addition, the --perm option allows you to set the number of bootstrap samples used in the analysis.\r\n\r\nThis command will produce 200 results files, results1-results200. To concatenate them together run:\r\n\r\n     awk 'FNR>1||NR==1' results* > results.all\r\n\r\n\r\nThe output should look like this:\r\n\r\n![CaVEMaN results example](screenshots/CaVEMaN.results.png)\r\n\r\nThe output contains every SNP in the cis window, the first five fields specify the gene and SNP, Cor and P fields give the results of a simple correlation analysis of SNP and gene, and CaVEMaN gives the CaVEMaN score, a measure of whether this SNP is causal.\r\n\r\n## Extracting peak SNPs and estimating causal probabilities\r\n\r\nOnce the CaVEMaN analysis is complete, we can parse the results file to extract the SNP most likely to be causal, and calculate its causal probability (using the results of simulations). To do this run the following command:\r\n\r\n     CaVEMaN --best results.all --out results.best\r\n\r\nThe file results.best should look like this:\r\n\r\n![Screenshot, peak eQTL](screenshots/CaVEMaN.best.png)\r\n\r\nThe file contains the same fields as before, with the addition of the \"Probability\" column which gives the probability the SNP is causal.\r\n\r\n## Producing credible sets of SNPs\r\n\r\nAnother way to parse the CaVEMaN results involves producing credible sets of SNPs, together with a probability that they contain the causal variant (again, calibrated with the simulations). To extract the sets of SNPs, with probability > 0.8 of containing the causal SNP, run the following command:\r\n\r\n    CaVEMaN --interval 0.8 --out results.credible.sets\r\n\r\n## Building from source\r\n\r\nThis requires a D compiler and a version of the GNU scientific library, version 2.1 or above.\r\n\r\n### Cloning the repository\r\n\r\nFirst, clone the repository by running:\r\n\r\n    git clone https://github.com/funpopgen/CaVEMaN.git\r\n\r\nThis should create a folder called CaVEMaN. Inside this folder is a file called makefile, in the first four lines we can specify the location of the D compiler and also where the gsl library is (if it is not already installed on your cluster).\r\n\r\n### Download a D compiler\r\n\r\nThen, download a D compiler from either here: https://github.com/ldc-developers/ldc/releases or here: http://dlang.org/dmd-linux.html (ldc produces faster software, my experience is that dmd works better on older operating systems). Decompress the downloaded file, then edit either the third or fourth line of the makefile in the CaVEMaN folder so that it contains the full path to the relevant compiler, i.e. either:\r\n\r\n**DMD = /path/to/dmd2/linux/bin64/dmd**\r\n\r\nor\r\n\r\n**LDC = /path/to/ldc2-1.1.0-beta2-linux-x86_64/bin/ldc2**\r\n\r\n### Installing, if necessary, gsl v2.1\r\n\r\nFirst, check if a sufficiently recent version of the gsl is already installed by running:\r\n     gsl-config --version\r\n\r\nIf this states that version 2.1 or more recent is installed, you can move on to building the software.\r\n\r\nOtherwise, download the gsl from here: http://mirror.switch.ch/ftp/mirror/gnu/gsl/gsl-2.1.tar.gz\r\n\r\nCreate a folder to install it to called gsl, then run the following commands:\r\n\r\n    tar -xf gsl-2.1.tar.gz\r\n    cd gsl-2.1/\r\n    ./configure prefix=/path/to/gsl\r\n    make\r\n    make install\r\n\r\nThen, edit the second line of the makefile in the CaVEMaN folder to give it the full path to the gsl folder you created, i.e.\r\n\r\n**GSL = /path/to/gsl**\r\n\r\n### Building the software\r\n\r\nNow to compile, run the commands from the relevant cell in the table (which depend on which compiler you downloaded and whether the gsl was pre-installed).\r\n\r\n|      | ldc | dmd |\r\n|----- |-----|-----|\r\n|**GSL already installed** | make test && make | make dmd_test && make dmd |\r\n|**GSL installed by  you** | make static_test && make static | make dmd_static_test && make dmd_static |\r\n\r\nNow the CaVEMaN binary should be within the bin folder in the CaVEMaN directory, running\r\n\r\n     ./bin/CaVEMaN --help\r\n\r\nshould bring up the help.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}